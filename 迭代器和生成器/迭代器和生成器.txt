当程序需要较高的性能或一次只需要一个值进行处理时,使用Generator函数。当
需要一次获取一组元素的值,使用序列
enumerate():该函数在for循环中遍历序列时可以同时迭代出索引和元素本身
对于字典，情况不同
eg:
phone_book={'张三':138,'lisi':156}
for i, value in enumerate(phone_book):
	print(i,value)
结果为	0 张三
		1 lisi
生成器:在Python中，一边循环一边计算的机制，称之为生成器(generator)
生成器的创建方法:
1.将列表生成式的[]改为()
eg：
L = [x**2 for x in range(20)]   #列表生成式
L1=(x**2 for x in range(10))  #生成器

我们可以直接打印出list的所有元素，却无法直接打印出generator的每一个元素。只能通
过next()函数获得生成器的下一个返回值。
print(next(L1))
print(next(L1))
print(next(L1))
......
generator保存的是算法，每次调用next(L1),可以计算出下一个元素的值，直至最后一个
元素，再继续输出，就会抛出StopIteration的错误
next()函数应用于for循环，而不是挨个输出
eg:
for i in L1:
	print(i)
2.在定义函数时包含yield关键字
在定义函数时包含yield关键字，那么该函数就不是普通函数，而是一个generator
eg：
def fib(max):
        n, a, b = 0, 0, 1
        while n < max :
                yield b
                a, b = b, a + b
                n = n + 1
        return "ok" #注意这里，使用return后的结果
print(fib(12))
变成generator的函数,在每次调用next的时候执行，遇到yield语句就返回，再次执行时从
上次返回的yield语句处继续执行。
直接用于for循环的数据类型有序列数据类型(list、tuple、dict、set、str等)和
generator
这些可直接作用于for循环的对象称之为可迭代对象Ietrable
判断一个对象是否是可迭代对象
import collections import Iterable
isinstance(A,Iterable)的值为True，说明是可迭代对象，为False则不是可迭代对象
迭代:通过for x in ...循环来完成的遍历称之为迭代
生成器都是Iterator,但list,dict,str等是Iterable，却不是Iterator
凡作用于next()函数的对象都是Iterator
iter():把list,dict,str等Iterable变成Iterator
eg:
from collections import Iterable, Iterator
phone_book = {'张三': 138,'lisi': 156}
print(isinstance(phone_book, Iterable)) 其值为True
print(isinstance(phone_book, Iterator)) 其值为False
print(isinstance(iter(phone_book), Iterator))  其值为True
python的Iterator表示一个数据流，Iterator对象可以被next()函数不断调用并不断返回
下一个数据，直至没有数据时抛出StopIteration异常。可以把这个数据流看作一个有序序
列，但不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据
python的for循环本质上就是通过不断调用next()函数实现的
eg:
lst=[1,2,3,4]
for x in lst:
	print(i)
等价于
lst1=iter(lst)
while True:
	try:
		x=next(i)
	except StopIteration:
		break
