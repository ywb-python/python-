1.定义
以关键字def开头，后面接函数标识符名称和()
任何传入参数和自变量必须放在圆括号中间，圆括号中间可用于定义参数
函数的第一行语句可以选择性的使用文档字符串用于存放函数说明
函数内容以冒号起始，并且缩进
return [表达式]结束函数，返回一个值给调用方。不带表达式的return相当于返回None
def hello():
	函数代码块
hello() 调用函数
2.变量的作用域
L:局部作用域
E:闭包函数外的函数中
G:全局作用域
B:内建作用域
变量的查找按照L –> E –> G –>B 的顺序进行查找
global:当内部作用域想要修改外部作用域的变量是，就要用到global关键字
3.可变类型与不可变类型
可变类型：value值改变，id值不变，可变参数通过指针音乐包进行传递
不可变类型：value值改变，id值也改变，不可变参数通过值进行传递
不可变数据类型:整数、布尔型、字符串、元组
可变数据类型:列表、字典
4.参数
必须参数:必须以正确的顺序传入函数，调用时的数量必须和声明时一样
关键字参数:和函数调用关系密切，函数调用使用关键字参数来确定传入的参数值。使用关
键字参数允许函数调用时参数的顺序与声明时不一致
默认参数:调用参数时，缺省参数的值如果没有传入，则被认为是默认值。默认参数必须指
向不可变数据类型
不定长参数：
fun(*args):传入的参数以元组的形式存在arg中
eg:
a=[11,21]
b=[1,2,3]
def t(*args):
    print(args)
t(20,334) 此时结果为(20, 334)
t(a) 此时结果为([11, 21],)
t(a,b) 此时结果为([11, 21], [1, 2, 3])
t(*a) 此时结果为(11, 21)
t(*a,*b) 此时结果为(11, 21，1,2,3)
fun(**kwargs)：传入的参数以字典的形式存在arg中
eg:
b={'脏':23,'陈老师':24}
def t(**kwargs):
    print(kwargs)
t(**b) 此时结果为{'脏':23,'陈老师':24}
t(x=1,y=2,z=3) 此时结果为{'x': 1, 'y': 2, 'z': 3}
eg:
def t(a,b=10,*args,**kwargs):
    print(args) 此时结果为(30, 40, 50)
    print(kwargs) 此时结果为{'x': 1, 'y': 2, 'z': 3}
    print(a) 此时结果为a=10
    print(b) 此时结果为b=10
t(10,20,30,40,50,x=1,y=2,z=3)
keyword-only参数
eg:
def case(a, *b, c):
    print(a, b, c)


case(1, 2, c=3) 结果为1 (2,) 3
case(a=1, c=3) 结果为1 () 3
case(1, 2, 3) 这是错误的用法
5.匿名函数
python使用lambda来创建匿名函数
匿名函数的特点:
1.lambda只是一个表达式，函数体必def简单很多
2.lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的
逻辑进去。
3.lambda函数拥有自己的命名空间，且不能访问只有参数列表之外或全局命名空间里的参数
4.只能有一个表达式，返回值就是该表达式的结果
语法：lambda arg1[,arg2,...] 表达式
eg:sum = lambda arg1, arg2: arg1 + arg2
print(sum(10,20)):输出的值为30

map函数比for循环快，列表解析又比map函数快





