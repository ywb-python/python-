1.特点
列表的个体称之为元素，元素可以是任意对象
列表是有顺序的，可以使用索引进行访问
列表是可变的
2.创建
空列表的创建：name=[]或者list(iterable)
非空列表的创建: sonenum=[1,2,3,4,5,6]或者list(iterable)
列表中的元素可以是不同类型:books=["python",23.5,"linux",10]
3.访问
通过索引访问:列表名[索引号]
4.基本运算
[1,2,3]+[4,5,6]:列表组合,其结果为[1,2,3,4,5,6]
['hi']*4:重复，将列表中的元素全部重复4次，其结果为['Hi!', 'Hi!', 'Hi!', 'Hi!']
L=[1,2,3]
L*4 结果为[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]
[L]*4结果为 [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]
3 in [1,2,3]:判断元素是否在列表中，在返回True,否则返回False
for x in [1,2,3]:迭代
	print(x)
5.切片
格式：[sart:end:step]
start:起始索引，从0开始，-1表示结束。默认值为0
end:结束索引，默认值到取得最后一个元素
step；步长,步长为正时，代表从左往右取值。步长为负，代表从右往左取值。默认值为1
注：切片的结果不包含结束索引
-1代表列表的最后一个位置索引
start>end时，获得空列表
end>列表长度时,取到列表最后一个元素
列表名[:]获得整个列表所有元素
列表名[::-1]实现列表的反转
6.函数
k=[1,2,3]
len(k):查看列表k长度
max(k):返回列表中所有元素的最大值
min(k):返回列表中所有元素的最小值
列表添加的方法：
	k.append(m):在列表末尾添加新元素m，只接受一个参数
	k.extend([33,11]):在列表末尾一次性追加另一个序列中的多个值,只接受一个参数，要求
参数必须为序列类型
	注:
	append与extend的区别
		添加对象为字典时:
		k.append({'a':1}) 结果为k=[1,2,3,{'a':1}]
		k.extend({'a':1}) 结果为k=[1,2,3,'a']
		添加对象为列表时:
		k.append(['a',1]) 结果为k=[1,2,3,['a',1]]
		k.extend(['a',1]) 结果为k=[1,2,3,'a',1]
		添加对象为元组时:
		k.append(('a',1)) 结果为k=[1,2,3,('a',1)]
		k.extend(('a',1)) 结果为k=[1,2,3,'a',1]
	"+"和"extend"的区别:"+"返回的是原列表,extend()返回的是新列表，效率也不如extend高
字典
	k.insert(n,m):将元素m插入到索引为n的位置。第一个参数为索引，第二个参数为元素名
	注:list.insert(index，obj)
		(1)index=0时，从起始位置插入obj
		(2)index>0且index<len(list)时，从index的位置插入obj
		(3)index<0且abs(index)<len(list)时，插入到index-1的位置
		(4)index<0且abs(index)>len(list)时，从起始位置插入obj
		(5)index>len(list)时，从末尾插入obj
列表删除的方法：
	k.remove(m)：从左向右查找,移除列表中第一个m元素,没有该元素则报错
	k.pop(n):根据索引n移除列表的元素k[n],不加参数默认移除列表最后一个元素，
	并且返回被移除元素的值[
	del k[n]:根据索引n移除列表的元素k字典[n]
	del k:删除整个列表k
	k.clear():清空列表
其他：
	k.index(m):从左向右查找，返回第一个元素m对应的索引
	注:k.index(m,start.end):在指定范围(不包含end)内返回第一个元素m对应的索引
	k.count(m):返回元素m在列表中出现的次数
	k.reverse():反向列表中的元素
	reserved(k):该函数返回迭代器对象，可用于反向迭代
	k.sort():对列表中的元素从小到大排序
	注:指定参数reverse=True则对列表中的元素从大到小排序
	sorted(k):该函数可作用于任何序列，总是返回列表
	k.copy():复制列表,并返回新的列表




