IP协议
IP包的特点是按块发送,途经多个由，不保证能到达，也不保证按顺序到达
IPV4地址是32位整数，IPV6是一个64位整数
一个IP包除了要传输的数据以外，还要有源IP地址、源端口号、目标IP地址、目标端口号
端口用于区分进程
socket编程流程
import socket
1.服务器根据地址类型、socket类型、协议类型创建socket
con = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
AF_INET指定用IPV4协议，AF_INET6指定用IPV6协议，默认为IPV4协议
SOCK_STREAM指定了TCP协议，SOCK_DGRAM制定了UDP协议,m默认为TCP协议
2.服务器为socket绑定ip地址和端口号
addr=('127.0.0.1',8034)
con.bind(addr)
3.服务器socket监听端口号请求，随时准备接收客户端发来的链接，这时服务器的socket
并没有被打开
conn.listen(5)
4.客户端创建scoket
con=socket.socket()
5.客户端打开socket，根据服务器ip地址和端口号试图连接服务器socket
addr=('127.0.0.1',8032)
con.connect(addr)
6.服务器socket接收到客户端socket请求，被动打开，开始接收客户请求，直至客户端返回
连接信息。这时socket进入阻塞状态
t=input('请输入你想对他(她）说的话')
con.sendall(t.encode('utf-8'))
7.客户端连接成功，向服务器返回连接状态信息。
8.服务器accept()方法返回，连接成功
sk,addr=conn.accept()
9.客户端或服务端向socket写入信息
t=input('请输入你想对他(她）说的话')
con.sendall(t.encode('utf-8'))
10.服务端或客户端读取信息
data=con.recv(1024)
11.客户端关闭
12.服务端关闭
http协议规定客户端必须先发送请求给客户端，服务端才能发送数据给客户端
socket方法
服务端
s.bind(host,port):绑定地址到套接字,在AF_INET下，以元组(host,port)的方式表示地址
s.listen(backlog):开始TCP监听,backlog指定在拒绝连接之前，操作系统可以挂起的最大连接数量,
一般为5
s.accept():接受连接并返回(conn,address)。其中conn是新的套接字对象，可以用来接收
和发送数据，address是连接客户端的地址
客户端
s.connect():主动初始化TCP服务器连接，一般address的格式为元组(host,port)。如果连
接出错，则返回socket.error错误
s.connect_ex():connect()的扩展版本，出错时返回错误码而不是抛出异常，连接成功返
回0
公共用途的函数
s.recv(bufsize[,flag]):接收TCP数据，以字符串形式返回，bufsize指定要接受的最大
数据量，flag提供有关消息的其他信息，可以忽略
s.send():发送TCP数据，将string中的数据发送到连接的套接字，返回值是要发送的字节
数量，该数量可能小于string的字节大小
s.sendall():完整发送TCP数据，将string中的数据发送到连接的套接字，但是返回之前会
尝试发送所有数据，成功返回None，失败抛出异常
s.close():关闭套接字
s.recvfrom():接收UDP数据，与recv()类似,但返回值是(data,address)。其中，data是包
含接收数据的字符串，address是发送数据的套接字地址
s.sendto():发送UDP数据，将数据发送到连接的套接字，address的形式是(ipaddr,port)
的元组，指定远程地址,返回值是发送的字节数
s.getpeername():返回连接套接字的远程地址,返回值通常是元组(ipaddr,port)
s.getsockname():返回套接字自己的地址，返回值通常是元组(ipaddr,port)
s.setsockopt(选项):设置给定套接字选项的值
s.getsockopt(选项):获取给定套接字选项的值
s.settimeout(time):设置套接字操作的超时时间。time是一个浮点数，单位是秒,值为None表
示没有超时时间
s.gettimeout(time):获取套接字操作的超时时间。若未设置超时时间，返回值为None
s.fileno():返回套接字的文件描述符
s.setblocking(flag):如果flag为0，则套接字为非阻塞模式，否则将套接字设为阻塞模式
。非阻塞模式下，如果recv()没有接收到数据或send()无法发送数据将会引发
socket.error异常
s.makefile():创建一个与该套接字相关联的文件
eg：
TCP协议
服务端
import socket
conn=socket.socket()
addr=('127.0.0.1',8034)
conn.bind(addr)
conn.listen(5)
print('1111')
while True:
    sk,addr=conn.accept()
    while 1:
        data=sk.recv(27323)
        if data.decode('utf-8')=='q':
            print('断开成功')
            break
        sk.sendall('傻瓜'.encode('utf-8')+data)
        print(sk,addr)
客户端
import socket
con=socket.socket()
addr=('127.0.0.1',8032)
con.connect(addr)
while True:
    t=input('请输入你想对他(她）说的话')
    con.sendall(t.encode('utf-8'))
    data=con.recv(1024)
    print(data.decode('utf-8'))
UDP协议
服务端
import socket
conn=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
conn.bind(('127.0.0.1',8056))
while True:
    data,addr=conn.recvfrom(1024)
    print(str(data),str(addr))
    t2=input('请输入你想对他(她）说的话')
    conn.sendto(bytes(t2,encoding='utf-8'),addr)
客户端
import socket
cs=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
addr=('127.0.0.1',8056)
while True:
    t1=input('请输入你想对他(她）说的话')
    cs.sendto(bytes(t1,encoding='utf-8'),addr)
    data,addr=cs.recvfrom(1024)
    print(str(data),str(addr))



