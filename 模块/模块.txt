1.模块
一个包含变量、类和函数的后缀名为.py的文件
模块导入的方法
方法1：import 模块名1[,模块名2,...模块名N]
方法2：from 模块名 import name1[,name2,...nameN]
注：这里的name可能是类名、函数名、全局变量名
当需要访问模块的属性和方法时，选择方法2
当模块的属性和方法与自己定义的模块重名时，选择方法1
方法1是模块自身被导入，但是它保持着自己的命名空间
方法2是从另一个模块中将指定的函数和属性导入到自己的命名空间，
import只能导入模块，不能导入模块对象(类、函数、变量等)
给模块起别名 
import  random as  rd
导入模块语句的执行
解释器执行到导入语句时，如果在搜索路径中找到了指定模块(Python的搜索路径都放在了sys.path中
。若是却省的sys.path没有含有自己的模块或包的路径，动态加入即可)，就会加载他
如果在一个模块的顶层被导入，那么它的作用域就是全局的。如果在函数中被导入，那么它
的作用域就是该函数内部

2.命名空间
Python使用命名空间来记录变量的轨迹。命名空间是一个字典，他们的键就是变量名，值就
是变量的值。包括全局命名空间、局部命名空间和内置命名空间
命名空间的查找顺序：局部命名空间 –> 全局命名空间 –> 内置命名空间 –>NameError异常
命名空间的访问
局部命名空间可以用locals()访问
locals 返回一个名字/值对的字典。这个 字典的键是字符串形式的变量名字，字典的值是
变量的实际值。
示例：
def func1(i,str): 
	x = 12345 
	print(locals()) 
func1(1,"first") 其结果为{'i': 1, 'str': 'first', 'x': 12345}
全局命名空间可以用globals()来访问
模块的命名空间不仅包含模块级的变量和常量，还包括所有在模块中定义的函数和类。
除此之外，还包括任何被导入到该模块的东西
命名空间的生命周期
内置命名空间在Python解释器启动时创建，会一直保留，不被删除
模块的全局命名空间在模块定义被读入时创建，通常模块命名空间也会一直保留到解释器
退出
当函数被调用时创建一个局部命名空间，当函数返回结果或抛出异常时，被删除。每一个
递归调用的函数都拥有自己的命名空间
python的赋值操作操作知识将命名绑定到对象
3.import机制
Python中所有加载到内存的模块都放在sys.modules中
当import导入一个模块时首先会在sys.modules这个字典中查找是否已经加载了这个模块。
如果加载了则只是将模块的名字加入到正在调用import的模块的local名字空间中。如果没
有加载则从sys.path目录中按照模块名称查找模块文件找到后将模块载入内存，并添加到
sys.modules中，并将名称导入到当前的local名字空间
包：包含__init__.py文件的目录
模块导入时，Python会检查文件的时间戳，如果发现字节码文件比源文件旧，就会在程序运行时自动生
成字节码，反之则跳过源代码到字节码的步骤。
4.pyperclip模块:剪贴板读写模块
pyperclip.copy():用于复制内容到剪贴板
pyperclip.paste():用于将剪贴板的内容读取出来
6.模块导入的顺序
标准库模块 –> 第三方模块 –> 自定义模块
__all__:用于记录当前包所包含的模块
7.全局字典:sys.modules
python启动后就将该模块加载在内存中
8.Python的搜索路径
程序的主目录、PYTHONPATH目录(已设置的话)、标准链接库目录、任何.pth文件的内容(若存在的话)
这四者构成了sys.path
