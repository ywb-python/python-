进程和线程特点
进程是不活泼的，不执行任何任务，只是线程的容器。
进程要完成某项操作，必须得有一个在该环境中运行的线程
当创建进程时，操作系统会自动创建主线程。主线程可以创建其他线程
多线程
threading模块
常用方法
curent_thrad():返回当前线程的实例，主线程实例的名字叫MainThread
start():启动线程，即线程准备就绪，等待cpu调度
setName():为线程设置名称
getName():获取线程名称
join():主线程等待子线程结束后再继续往下执行
setDaemon(True):设置为守护线程
启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：
线程创建实例:
eg：
def loop():
    print('线程 %s 正在执行...' % threading.current_thread().name)
    n = 0
    while n < 5:
        n = n + 1
        print('线程 %s >>> %s' % (threading.current_thread().name, n))
        time.sleep(1)
    print('线程 %s 结束.' % threading.current_thread().name)
print('线程 %s is 正在执行...' % threading.current_thread().name)
t = threading.Thread(target=loop, name=‘LoopThread’)#创建线程实例
t.start()#启动线程
t.join()#主线程执行到此，等待子线执行结束在继续往下执行。
print('线程 %s 结束.' % threading.current_thread().name)
当我们使用setDaemon()方法设置线程守护的时候，则主线程结束后该线程立即结束，
不管该线程的任务有没有执行完成。一般将不重要的线程设置为守护线程
ThreadLocal:线程本地变量
ThreadLocal为变量在每个线程中都创建了一个副本，每个线程可以访问自己内部的副本变
量
ThreadLocal最常用的地方就是为每一个线程绑定一个数据库请求，http请求，用户身份信
息等
多线程和多进程的区别
多进程中，同一变量各自有一份拷贝存在于每个进程中，互不影响
多线程中，所有变量由所有线程共享，任何一个变量都可以为任何一个线程修改
线程锁
多个线程执行loock.acquire()时只有一个线程成功获取锁，其他线程继续等待直到获得锁
为止。获得锁的进程用完后一定要lock.release()(释放锁)，我们通过try...finally语句
来保证这一点
线程锁的优缺点
优点:保证了在一定时间内某段关键代码只能有一个线程从头到尾执行
缺点:阻止了多线程并发执行，降低了效率。
不同的线程有不同的锁，并试图获取对方的锁，容易造成死锁
全局解释锁(GIL)：
在非Python环境中，单核只能有一个线程执行，多核时可以有多个线程同时执行
Python环境中，无论单核还是多核，都只能同时执行一个线程，这是由GIL引起的
GIL只在cpython存在，jPython中没有GIL
一个Python进程中,GIL只有一个。多进程有各自独立的GIL,互不影响
Python中，多核任务只能通过多进程实现
多进程 multiprocessing模块
多进程的应用程序应在linux上进行
进程常用方法
start():启动进程
join():等待子进程结束后再继续往下执行，通常用于进程间的同步
eg:
from multiprocessing import Process
import os
# 子进程要执行的代码
def run_proc(name):
    print('Run child process %s (%s)...' % (name, os.getpid()))
if __name__=='__main__':
    print('Parent process %s.' % os.getpid())
    p = Process(target=run_proc, args=('test',))
    print('Child process will start.')
    # 启动进程
    p.start()
    # 等待子进程结束后再继续往下运行，通常用于进程间的同步
    p.join()
    print(‘Child process end.’)
进程池：pool()类
pool()类可以提供指定数量的进程供用户调用。当有新的请求提交到pool类时，如果进程
池还没有满，就会创建一个新的进程来执行请求；如果进程池已满，请求就会被告知等待
，直至进程池有进程执行结束才会创建一个新的进程来执行请求
方法
apply_async(func[, args=()[, kwds={}[, callback=None]]]):用于传递不定参数，非阻
塞。支持结果返回进行回调
map(func, iterable[, chunksize=None]):Pool类中的map方法，与内置的map函数用法行
为基本一致，它会使进程阻塞直到返回结果。
close():关闭进程池，使其不再接受新的任务
terminate():结束工作进程，不再处理未处理的任务
join():主进程阻塞等待子进程的退出，join方法必须在close或terminate之后使用
eg:from multiprocessing import Pool
import os, time, random
def long_time_task(name):
    print(‘运行任务 %s (%s)...' % (name, os.getpid())) #os.getpid():获得当前进程的进程号
    start = time.time()     time.sleep(random.random() * 3)
    end = time.time()
    print(任务%s 运行%0.2f 秒.' % (name, (end - start)))
if __name__=='__main__':
    print('Parent process %s.' % os.getpid())
    p = Pool(4) #创建拥有4个进程数量的进程池
    for i in range(5):
        p.apply_async(long_time_task, args=(i,))
    print('Waiting for all subprocesses done...')
    p.close()
    p.join()
    print('All subprocesses done.')
subprocesses模块启动外部进程，控制其输入输出
eg:
import subprocess
print('$ ping www.baidu.com')
r = subprocess.call(['ping', 'www.baidu.com'])
print('Exit code:', r)
#通过python程序调用外部程序，调用我的Notepad++文本编辑器
subprocess.call(r“C:\Program Files\Notepad++\Notepad++.exe”,shell=True)
#通过python程序调用windows doc命令
subprocess.call(r"dir e: ",shell=True)
进程间的通信
python的multiprocessing模块提供了Queue、Pipes来实现进程间的通信
eg:
from multiprocessing import  Process, Queue
import os, time, random # 写数据进程执行的代码:
def write(q):
    print('Process to write: %s' % os.getpid())
    for value in ['A', 'B', 'C']:
        print('Put %s to queue...' % value)
        q.put(value)
        time.sleep(random.random())
# 读数据进程执行的代码:
def read(q):
    print('Process to read: %s' % os.getpid())
    while True:
        value = q.get(True)
        print('Get %s from queue.' % value)
if __name__=='__main__':
# 父进程创建Queue，并传给各个子进程：
q = Queue()
pw = Process(target=write, args=(q,))
pr = Process(target=read, args=(q,))
# 启动子进程pw，写入:
pw.start()
# 启动子进程pr，读取:
pr.start()
# 等待pw结束:
pw.join()
# pr进程里是死循环，无法等待其结束，只能强行终止:
pr.terminate()
Queue 模块可以用来进行线程间通讯，让各个线程之间共享数据。
Queue队列
FIFO队列
Queue.Queue(maxsize=k)
先进先出，maxsize指定了队列中所能存放的最大数据的数目。
maxsize>0，一旦等于maxsize，插入会,导致阻塞，直至队列中的数据弹出。
maxsize<=0，队列大小无限制
eg:
import queue
q = queue.Queue()
for i in range(5):
    q.put(i)
while not q.empty():
    print (q.get())
LIFO队列
eg:
import Queue
q = Queue.LifoQueue()
for i in range(5):
    q.put(i)
while not q.empty():
    print q.get()
多线程与多进程的对比
多进程
优点:
稳定性高，子进程崩溃不会导致主进程和其他进程的崩溃(如果主进程崩溃，则所有进程全
部崩溃)。
缺点:
创建进程代价较大，尤其是在windows下。
操作系统本身能同时运行的进程数有限。进程过多，操作系统的调度就会出问题
多线程
优点:
效率高
缺点
任何一个线程崩溃都有可能导致整个进程崩溃
事件驱动模型
利用单进程单线程的模型来执行多任务




 




